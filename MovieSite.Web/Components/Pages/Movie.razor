@page "/movie"
@using MovieSite.ApiService.Movies
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject MovieApiClient MovieApi

<PageTitle>Movies</PageTitle>

<h1>Movies</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (movies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Genre</th>
                <th>Release Date</th>
                <th>Review Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in movies)
            {
                <tr>
                    <td>@movie.Title</td>
                    <td>@movie.Genre</td>
                    <td>@movie.ReleaseDate.ToLongDateString()</td>
                    <td>@movie.ReviewScore</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<GetMovieView>? movies;

    protected override async Task OnInitializedAsync()
    {
        movies = await MovieApi.GetMovies();
    }
}
